openapi: 3.0.3
info:
  title: WASAText API
  description: |-
    This OpenAPI document defines the API for the WASAText application.
    It supports messaging, groups, simplified login, and user profile management.
  version: "1.0.0"

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/fallenkarma/wasaProject/1.0.0
  - url: http://localhost:8080/api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: string
  schemas:
    Conversation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          $ref: "#/components/schemas/ConversationType"
        photo:
          type: string
          format: uri
        participants:
          type: array
          items:
            $ref: "#/components/schemas/Participant"
        lastMessage:
          $ref: "#/components/schemas/Message"
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
    ConversationType:
      type: string
      enum:
        - direct
        - group
    CreateConversationRequest:
      type: object
      properties:
        participants:
          type: array
          items:
            type: string
          description: UserIDs of participants (excluding the creator)
        type:
          $ref: "#/components/schemas/ConversationType"
        name:
          type: string
      required:
        - participants
        - type
        - name
    SendMessageRequest:
      type: object
      properties:
        conversationId:
          type: string
        sender:
          $ref: "#/components/schemas/User"
        content:
          type: string
        type:
          $ref: "#/components/schemas/MessageType"
    Message:
      type: object
      properties:
        id:
          type: string
        conversationId:
          type: string
        sender:
          $ref: "#/components/schemas/User"
        timestamp:
          type: string
          format: date-time
        content:
          type: string
        type:
          $ref: "#/components/schemas/MessageType"
        status:
          $ref: "#/components/schemas/MessageStatus"
        replyTo:
          type: string
        deletedAt:
          type: string
          format: date-time
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/Reaction"
    MessageStatus:
      type: string
      enum:
        - sent
        - received
        - read
    MessageType:
      type: string
      enum:
        - text
        - photo
    Participant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        photo:
          type: string
          format: uri
    Reaction:
      type: object
      properties:
        messageId:
          type: string
        userI:
          type: string
        emoji:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        photo:
          type: string
          format: uri

security:
  - bearerAuth: []

paths:
  /session:
    post:
      tags: [login]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created, and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  minLength: 3
                  maxLength: 16
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f54321a2-24f5-420a-91c7-bfa3d874722f"

  /users/me/username:
    put:
      tags: [user]
      summary: Update user's name
      operationId: setMyUserName
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "200":
          description: Username updated

  /users/me/photo:
    put:
      tags: [user]
      summary: Set user photo
      operationId: setMyPhoto
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
      responses:
        "200":
          description: Photo uploaded

  /conversations:
    get:
      tags: [conversation]
      summary: Get user's conversations
      operationId: getMyConversations
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of conversations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Conversation"

    post:
      tags: [conversation]
      summary: Create a new conversation
      operationId: newConversation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateConversationRequest"
      responses:
        "201":
          description: Conversation created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"

  /conversations/{id}:
    get:
      tags: [conversation]
      summary: Get specific conversation
      operationId: getConversation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Conversation details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"

  /messages:
    post:
      tags: [message]
      summary: Send a new message
      operationId: sendMessage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendMessageRequest"
      responses:
        "201":
          description: Message sent

  /messages/forward:
    post:
      tags: [message]
      summary: Forward a message
      operationId: forwardMessage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: string
                targetConversationId:
                  type: string
      responses:
        "200":
          description: Message forwarded

  /messages/{id}/reaction:
    post:
      tags: [message]
      summary: Add a reaction to a message
      operationId: commentMessage
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reaction"
      responses:
        "200":
          description: Comment added

    delete:
      tags: [message]
      summary: Remove reaction from message
      operationId: uncommentMessage
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Comment removed

  /messages/{id}:
    delete:
      tags: [message]
      summary: Delete a message
      operationId: deleteMessage
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Message deleted

  /groups/{id}/members:
    post:
      tags: [group]
      summary: Add user to group
      operationId: addToGroup
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        "200":
          description: User added

  /groups/{id}/leave:
    post:
      tags: [group]
      summary: Leave group
      operationId: leaveGroup
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Left group

  /groups/{id}/name:
    put:
      tags: [group]
      summary: Set group name
      operationId: setGroupName
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "200":
          description: Group name updated

  /groups/{id}/photo:
    put:
      tags: [group]
      summary: Set group photo
      operationId: setGroupPhoto
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
      responses:
        "200":
          description: Group photo set
